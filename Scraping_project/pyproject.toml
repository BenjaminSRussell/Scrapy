[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "uconn-scraper"
version = "0.2.0"
description = "A three-stage web scraping pipeline for the uconn.edu domain"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Benjamin Russell"},
]
keywords = ["web-scraping", "scrapy", "nlp", "data-pipeline", "async"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "scrapy>=2.13.3",
    "aiohttp>=3.9.5",
    "requests>=2.32.3",
    "beautifulsoup4>=4.12.0,<5.0.0",
    "lxml>=5.0.0,<6.0.0",
    "w3lib>=2.3.1",
    "Twisted>=24.7.0",
    "PyYAML>=6.0.2",
    "jsonlines>=3.0.0,<5.0.0",
    "itemadapter>=0.10.0",
    "pandas>=2.0.0,<3.0.0",
    "numpy>=1.26.0,<2.0.0",
    "spacy>=3.7.4,<3.8",
    "click>=8.1.0,<9.0.0",
    "tqdm>=4.65.0,<5.0.0",
    "psutil>=5.9.5,<6.0.0",
    "python-dateutil>=2.8.0,<3.0.0",
    "typing-extensions>=4.12.2",
    "pydantic>=2.0.0,<3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.2",
    "pytest-asyncio>=0.23.8",
    "pytest-html>=3.1.0",
    "pytest-mock>=3.10.0",
    "pytest-timeout>=2.3.1",
    "pytest-cov>=4.1.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

nlp = [
    "transformers>=4.30.0",
    "sentence-transformers>=2.2.0",
    "torch>=2.0.0",
]

all = [
    "uconn-scraper[dev,nlp]",
]

[project.scripts]
uconn-scraper = "src.orchestrator.main:main"
uconn-pipeline = "src.orchestrator.main:main"

[project.urls]
Homepage = "https://github.com/benjaminrussell/uconn-scraper"
Documentation = "https://github.com/benjaminrussell/uconn-scraper/tree/main/docs"
Repository = "https://github.com/benjaminrussell/uconn-scraper"
Issues = "https://github.com/benjaminrussell/uconn-scraper/issues"

[tool.setuptools]
packages = ["src"]

[tool.setuptools.package-data]
src = ["py.typed"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "network: marks tests that require network access",
]
asyncio_mode = "auto"

# Black configuration
[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | data
  | logs
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["data/*", "logs/*", ".venv/*", "build/*"]

# mypy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "scrapy.*",
    "twisted.*",
    "w3lib.*",
    "spacy.*",
    "transformers.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
