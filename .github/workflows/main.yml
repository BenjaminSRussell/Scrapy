name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r Scraping_project/requirements.txt
        python -m spacy download en_core_web_sm

    - name: Lint with ruff
      run: |
        pip install ruff
        ruff check Scraping_project/src/ --select F,E4,E7,E9 --output-format=github

    - name: Run unit tests
      run: |
        cd Scraping_project
        python -m pytest tests/common/ tests/stage1/ -v --tb=short -m "not slow"

    - name: Run integration tests
      run: |
        cd Scraping_project
        python -m pytest tests/integration/ -v --tb=short --maxfail=5 -m "not slow"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Build package
      run: |
        cd Scraping_project
        python -m pip install build
        python -m build

    - name: Deploy to Production
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key

        scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          Scraping_project/dist/*.whl \
          $DEPLOY_USER@$DEPLOY_HOST:/opt/scraper/

        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          $DEPLOY_USER@$DEPLOY_HOST \
          "pip install --force-reinstall /opt/scraper/*.whl && systemctl restart scraper.service"
